<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="libappindicator-app-indicator">
<refmeta>
<refentrytitle role="top_of_page" id="libappindicator-app-indicator.top_of_page">AppIndicator</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBAPPINDICATOR Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>AppIndicator</refname>
<refpurpose>An object to put application information
		into the panel.</refpurpose>
</refnamediv>
<refsect1 id="libappindicator-app-indicator.stability-level">
<title>Stability Level</title>
Unstable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="libappindicator-app-indicator.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="AppIndicator"/>
<synopsis>
#include &lt;libappindicator/app-indicator.h&gt;

#define             <link linkend="APP-INDICATOR-TYPE:CAPS">APP_INDICATOR_TYPE</link>
#define             <link linkend="APP-INDICATOR:CAPS">APP_INDICATOR</link>                       (obj)
#define             <link linkend="APP-INDICATOR-CLASS:CAPS">APP_INDICATOR_CLASS</link>                 (klass)
#define             <link linkend="IS-APP-INDICATOR:CAPS">IS_APP_INDICATOR</link>                    (obj)
#define             <link linkend="IS-APP-INDICATOR-CLASS:CAPS">IS_APP_INDICATOR_CLASS</link>              (klass)
#define             <link linkend="APP-INDICATOR-GET-CLASS:CAPS">APP_INDICATOR_GET_CLASS</link>             (obj)
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-ICON:CAPS">APP_INDICATOR_SIGNAL_NEW_ICON</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-ATTENTION-ICON:CAPS">APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-NEW-STATUS:CAPS">APP_INDICATOR_SIGNAL_NEW_STATUS</link>
#define             <link linkend="APP-INDICATOR-SIGNAL-CONNECTION-CHANGED:CAPS">APP_INDICATOR_SIGNAL_CONNECTION_CHANGED</link>
enum                <link linkend="AppIndicatorCategory">AppIndicatorCategory</link>;
enum                <link linkend="AppIndicatorStatus">AppIndicatorStatus</link>;
                    <link linkend="AppIndicatorPrivate">AppIndicatorPrivate</link>;
                    <link linkend="AppIndicator-struct">AppIndicator</link>;
                    <link linkend="AppIndicatorClass">AppIndicatorClass</link>;
<link linkend="GType"><returnvalue>GType</returnvalue></link>               <link linkend="app-indicator-get-type">app_indicator_get_type</link>              (<parameter><type>void</type></parameter>);
<link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      <link linkend="app-indicator-new">app_indicator_new</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>);
<link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      <link linkend="app-indicator-new-with-path">app_indicator_new_with_path</link>         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_path</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-status">app_indicator_set_status</link>            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="AppIndicatorStatus"><type>AppIndicatorStatus</type></link> status</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-attention-icon">app_indicator_set_attention_icon</link>    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-menu">app_indicator_set_menu</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="GtkMenu"><type>GtkMenu</type></link> *menu</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="app-indicator-set-icon">app_indicator_set_icon</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-id">app_indicator_get_id</link>                (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="AppIndicatorCategory"><returnvalue>AppIndicatorCategory</returnvalue></link>  <link linkend="app-indicator-get-category">app_indicator_get_category</link>        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="AppIndicatorStatus"><returnvalue>AppIndicatorStatus</returnvalue></link>  <link linkend="app-indicator-get-status">app_indicator_get_status</link>            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-icon">app_indicator_get_icon</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="app-indicator-get-attention-icon">app_indicator_get_attention_icon</link>    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
<link linkend="GtkMenu"><returnvalue>GtkMenu</returnvalue></link> *           <link linkend="app-indicator-get-menu">app_indicator_get_menu</link>              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="libappindicator-app-indicator.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----AppIndicator
</synopsis>
</refsect1>
<refsect1 id="libappindicator-app-indicator.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="AppIndicator--attention-icon-name">attention-icon-name</link>&quot;      <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--category">category</link>&quot;                 <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only
  &quot;<link linkend="AppIndicator--connected">connected</link>&quot;                <link linkend="gboolean"><type>gboolean</type></link>              : Read
  &quot;<link linkend="AppIndicator--icon-name">icon-name</link>&quot;                <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
  &quot;<link linkend="AppIndicator--icon-theme-path">icon-theme-path</link>&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only
  &quot;<link linkend="AppIndicator--id">id</link>&quot;                       <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only
  &quot;<link linkend="AppIndicator--menu">menu</link>&quot;                     <link linkend="DBusGObjectPath"><type>DBusGObjectPath</type></link>*      : Read
  &quot;<link linkend="AppIndicator--status">status</link>&quot;                   <link linkend="gchar"><type>gchar</type></link>*                : Read / Write
</synopsis>
</refsect1>
<refsect1 id="libappindicator-app-indicator.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="AppIndicator-connection-changed">connection-changed</link>&quot;                             : Run Last
  &quot;<link linkend="AppIndicator-new-attention-icon">new-attention-icon</link>&quot;                             : Run Last
  &quot;<link linkend="AppIndicator-new-icon">new-icon</link>&quot;                                       : Run Last
  &quot;<link linkend="AppIndicator-new-status">new-status</link>&quot;                                     : Run Last
</synopsis>
</refsect1>

<refsect1 id="libappindicator-app-indicator.description" role="desc">
<title role="desc.title">Description</title>
<para>
An application indicator is a way for an application to put
	a menu into the panel on the user's screen.  This allows the
	user to interact with the application even though it might
	not be visible to the user at the time.  In most cases this
	is not a good solution as there are other ways to inform the
	user.  It should only be use if persistence is a desired
	feature for the user (not for your marketing purpose of
	having your logo in the panel).
</para>
</refsect1>
<refsect1 id="libappindicator-app-indicator.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="APP-INDICATOR-TYPE:CAPS" role="macro">
<title>APP_INDICATOR_TYPE</title>
<indexterm zone="APP-INDICATOR-TYPE:CAPS"><primary>APP_INDICATOR_TYPE</primary></indexterm>
<programlisting>#define APP_INDICATOR_TYPE            (app_indicator_get_type ())
</programlisting>
<para>
Get the <link linkend="GType"><type>GType</type></link> for a <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para></refsect2>
<refsect2 id="APP-INDICATOR:CAPS" role="macro">
<title>APP_INDICATOR()</title>
<indexterm zone="APP-INDICATOR:CAPS"><primary>APP_INDICATOR</primary></indexterm>
<programlisting>#define APP_INDICATOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), APP_INDICATOR_TYPE, AppIndicator))
</programlisting>
<para>
Safely convert a <link linkend="GObject"><type>GObject</type></link> into an <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara>The object to convert
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="APP-INDICATOR-CLASS:CAPS" role="macro">
<title>APP_INDICATOR_CLASS()</title>
<indexterm zone="APP-INDICATOR-CLASS:CAPS"><primary>APP_INDICATOR_CLASS</primary></indexterm>
<programlisting>#define APP_INDICATOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), APP_INDICATOR_TYPE, AppIndicatorClass))
</programlisting>
<para>
Safely convert a <link linkend="GObjectClass"><type>GObjectClass</type></link> into a <link linkend="AppIndicatorClass"><type>AppIndicatorClass</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara><link linkend="GObjectClass"><type>GObjectClass</type></link> based class to convert.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="IS-APP-INDICATOR:CAPS" role="macro">
<title>IS_APP_INDICATOR()</title>
<indexterm zone="IS-APP-INDICATOR:CAPS"><primary>IS_APP_INDICATOR</primary></indexterm>
<programlisting>#define IS_APP_INDICATOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), APP_INDICATOR_TYPE))
</programlisting>
<para>
Checks to see if <parameter>obj</parameter> is in the object hierarchy of <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="GObject"><type>GObject</type></link> to check
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="IS-APP-INDICATOR-CLASS:CAPS" role="macro">
<title>IS_APP_INDICATOR_CLASS()</title>
<indexterm zone="IS-APP-INDICATOR-CLASS:CAPS"><primary>IS_APP_INDICATOR_CLASS</primary></indexterm>
<programlisting>#define IS_APP_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), APP_INDICATOR_TYPE))
</programlisting>
<para>
Checks to see if <parameter>klass</parameter> is in the object class hierarchy of <link linkend="AppIndicatorClass"><type>AppIndicatorClass</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="GObjectClass"><type>GObjectClass</type></link> to check
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="APP-INDICATOR-GET-CLASS:CAPS" role="macro">
<title>APP_INDICATOR_GET_CLASS()</title>
<indexterm zone="APP-INDICATOR-GET-CLASS:CAPS"><primary>APP_INDICATOR_GET_CLASS</primary></indexterm>
<programlisting>#define APP_INDICATOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), APP_INDICATOR_TYPE, AppIndicatorClass))
</programlisting>
<para>
Gets a pointer to the <link linkend="AppIndicatorClass"><type>AppIndicatorClass</type></link> for the object <parameter>obj</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GObject"><type>GObject</type></link> in the class hierarchy of <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-ICON:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_ICON</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-ICON:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_ICON</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_ICON            "new-icon"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-icon"><type>"new-icon"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-ATTENTION-ICON:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-ATTENTION-ICON:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_ATTENTION_ICON  "new-attention-icon"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-attention-icon"><type>"new-attention-icon"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-NEW-STATUS:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_NEW_STATUS</title>
<indexterm zone="APP-INDICATOR-SIGNAL-NEW-STATUS:CAPS"><primary>APP_INDICATOR_SIGNAL_NEW_STATUS</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_NEW_STATUS          "new-status"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-new-status"><type>"new-status"</type></link> signal.
</para></refsect2>
<refsect2 id="APP-INDICATOR-SIGNAL-CONNECTION-CHANGED:CAPS" role="macro">
<title>APP_INDICATOR_SIGNAL_CONNECTION_CHANGED</title>
<indexterm zone="APP-INDICATOR-SIGNAL-CONNECTION-CHANGED:CAPS"><primary>APP_INDICATOR_SIGNAL_CONNECTION_CHANGED</primary></indexterm>
<programlisting>#define APP_INDICATOR_SIGNAL_CONNECTION_CHANGED  "connection-changed"
</programlisting>
<para>
String identifier for the <link linkend="AppIndicator-connection-changed"><type>"connection-changed"</type></link> signal.
</para></refsect2>
<refsect2 id="AppIndicatorCategory" role="enum">
<title>enum AppIndicatorCategory</title>
<indexterm zone="AppIndicatorCategory"><primary>AppIndicatorCategory</primary></indexterm>
<programlisting>typedef enum { /*&lt; prefix=APP_INDICATOR_CATEGORY &gt;*/
	APP_INDICATOR_CATEGORY_APPLICATION_STATUS,
	APP_INDICATOR_CATEGORY_COMMUNICATIONS,
	APP_INDICATOR_CATEGORY_SYSTEM_SERVICES,
	APP_INDICATOR_CATEGORY_HARDWARE,
	APP_INDICATOR_CATEGORY_OTHER
} AppIndicatorCategory;
</programlisting>
<para>
The category provides grouping for the indicators so that
	users can find indicators that are similar together.
</para><variablelist role="enum">
<varlistentry id="APP-INDICATOR-CATEGORY-APPLICATION-STATUS:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_APPLICATION_STATUS</literal></term>
<listitem><simpara>The indicator is used to display the status of the application.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-COMMUNICATIONS:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_COMMUNICATIONS</literal></term>
<listitem><simpara>The application is used for communication with other people.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-SYSTEM-SERVICES:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_SYSTEM_SERVICES</literal></term>
<listitem><simpara>A system indicator relating to something in the user's system.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-HARDWARE:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_HARDWARE</literal></term>
<listitem><simpara>An indicator relating to the user's hardware.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-CATEGORY-OTHER:CAPS" role="constant">
<term><literal>APP_INDICATOR_CATEGORY_OTHER</literal></term>
<listitem><simpara>Something not defined in this enum, please don't use unless you really need it.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="AppIndicatorStatus" role="enum">
<title>enum AppIndicatorStatus</title>
<indexterm zone="AppIndicatorStatus"><primary>AppIndicatorStatus</primary></indexterm>
<programlisting>typedef enum { /*&lt; prefix=APP_INDICATOR_STATUS &gt;*/
	APP_INDICATOR_STATUS_PASSIVE,
	APP_INDICATOR_STATUS_ACTIVE,
	APP_INDICATOR_STATUS_ATTENTION
} AppIndicatorStatus;
</programlisting>
<para>
These are the states that the indicator can be on in
	the user's panel.  The indicator by default starts
	in the state <parameter>APP_INDICATOR_STATUS_PASSIVE</parameter> and can be
	shown by setting it to <parameter>APP_INDICATOR_STATUS_ACTIVE</parameter>.
</para><variablelist role="enum">
<varlistentry id="APP-INDICATOR-STATUS-PASSIVE:CAPS" role="constant">
<term><literal>APP_INDICATOR_STATUS_PASSIVE</literal></term>
<listitem><simpara>The indicator should not be shown to the user.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-STATUS-ACTIVE:CAPS" role="constant">
<term><literal>APP_INDICATOR_STATUS_ACTIVE</literal></term>
<listitem><simpara>The indicator should be shown in it's default state.
</simpara></listitem>
</varlistentry>
<varlistentry id="APP-INDICATOR-STATUS-ATTENTION:CAPS" role="constant">
<term><literal>APP_INDICATOR_STATUS_ATTENTION</literal></term>
<listitem><simpara>The indicator should show it's attention icon.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="AppIndicatorPrivate" role="struct">
<title>AppIndicatorPrivate</title>
<indexterm zone="AppIndicatorPrivate"><primary>AppIndicatorPrivate</primary></indexterm>
<programlisting>typedef struct _AppIndicatorPrivate AppIndicatorPrivate;</programlisting>
<para>
All of the private data in an instance of a
	application indicator.
</para></refsect2>
<refsect2 id="AppIndicator-struct" role="struct">
<title>AppIndicator</title>
<indexterm zone="AppIndicator-struct"><primary>AppIndicator</primary></indexterm>
<programlisting>typedef struct _AppIndicator AppIndicator;</programlisting>
<para>
A application indicator represents the values that are needed to show a
	unique status in the panel for an application.  In general, applications
	should try to fit in the other indicators that are available on the
	panel before using this.  But, sometimes it is necissary.
</para></refsect2>
<refsect2 id="AppIndicatorClass" role="struct">
<title>AppIndicatorClass</title>
<indexterm zone="AppIndicatorClass"><primary>AppIndicatorClass</primary></indexterm>
<programlisting>typedef struct {
	/* Parent */
	GObjectClass parent_class;

	/* DBus Signals */
	void (* new_icon)               (AppIndicator       *indicator,
	                                 gpointer            user_data);
	void (* new_attention_icon)     (AppIndicator       *indicator,
	                                 gpointer            user_data);
	void (* new_status)             (AppIndicator       *indicator,
	                                 const gchar        *status,
	                                 gpointer            user_data);

	/* Local Signals */
	void (* connection_changed)     (AppIndicator * indicator,
	                                 gboolean          connected,
	                                 gpointer          user_data);

	/* Overridable Functions */
	GtkStatusIcon * (*fallback)     (AppIndicator * indicator);
	void (*unfallback)              (AppIndicator * indicator,
	                                 GtkStatusIcon * status_icon);

	/* Reserved */
	void (*app_indicator_reserved_1)(void);
	void (*app_indicator_reserved_2)(void);
} AppIndicatorClass;
</programlisting>
<para>
The signals and external functions that make up the <link linkend="AppIndicator"><type>AppIndicator</type></link>
	class object.
</para><variablelist role="struct">
<varlistentry><term><link linkend="GObjectClass"><type>GObjectClass</type></link>&#160;<structfield id="AppIndicatorClass.parent-class">parent_class</structfield>;</term>
<listitem><simpara>Mia familia
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-icon">new_icon</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-icon"><type>"new-icon"</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-attention-icon">new_attention_icon</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-attention-icon"><type>"new-attention-icon"</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.new-status">new_status</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-new-status"><type>"new-status"</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.connection-changed">connection_changed</structfield>&#160;()</term>
<listitem><simpara>Slot for <link linkend="AppIndicator-connection-changed"><type>"connection-changed"</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.fallback">fallback</structfield>&#160;()</term>
<listitem><simpara>Function that gets called to make a <link linkend="GtkStatusIcon"><type>GtkStatusIcon</type></link> when
		there is no Application Indicator area available.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.unfallback">unfallback</structfield>&#160;()</term>
<listitem><simpara>The function that gets called if an Application
		Indicator area appears after the fallback has been created.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-1">app_indicator_reserved_1</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="AppIndicatorClass.app-indicator-reserved-2">app_indicator_reserved_2</structfield>&#160;()</term>
<listitem><simpara>Reserved for future use.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-type" role="function">
<title>app_indicator_get_type ()</title>
<indexterm zone="app-indicator-get-type"><primary>app_indicator_get_type</primary></indexterm>
<programlisting><link linkend="GType"><returnvalue>GType</returnvalue></link>               app_indicator_get_type              (<parameter><type>void</type></parameter>);</programlisting>
<para>
Generates or returns the unique <link linkend="GType"><type>GType</type></link> for <link linkend="AppIndicator"><type>AppIndicator</type></link>.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A unique <link linkend="GType"><type>GType</type></link> for <link linkend="AppIndicator"><type>AppIndicator</type></link> objects.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-new" role="function">
<title>app_indicator_new ()</title>
<indexterm zone="app-indicator-new"><primary>app_indicator_new</primary></indexterm>
<programlisting><link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      app_indicator_new                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>);</programlisting>
<para>
Creates a new <link linkend="AppIndicator"><type>AppIndicator</type></link> setting the properties:
		<link linkend="AppIndicator-id"><type>"id"</type></link> with <parameter>id</parameter>, <link linkend="AppIndicator-category"><type>"category"</type></link>
		with <parameter>category</parameter> and <link linkend="AppIndicator-icon-name"><type>"icon-name"</type></link> with
		<parameter>icon_name</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>The unique id of the indicator to create.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name for this indicator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara>The category of indicator.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to a new <link linkend="AppIndicator"><type>AppIndicator</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-new-with-path" role="function">
<title>app_indicator_new_with_path ()</title>
<indexterm zone="app-indicator-new-with-path"><primary>app_indicator_new_with_path</primary></indexterm>
<programlisting><link linkend="AppIndicator"><returnvalue>AppIndicator</returnvalue></link> *      app_indicator_new_with_path         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *id</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>,
                                                         <parameter><link linkend="AppIndicatorCategory"><type>AppIndicatorCategory</type></link> category</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_path</parameter>);</programlisting>
<para>
Creates a new <link linkend="AppIndicator"><type>AppIndicator</type></link> setting the properties:
		<link linkend="AppIndicator-id"><type>"id"</type></link> with <parameter>id</parameter>, <link linkend="AppIndicator-category"><type>"category"</type></link>
		with <parameter>category</parameter>, <link linkend="AppIndicator-icon-name"><type>"icon-name"</type></link> with
		<parameter>icon_name</parameter> and <link linkend="AppIndicator-icon-theme-path"><type>"icon-theme-path"</type></link> with <parameter>icon_path</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>The unique id of the indicator to create.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name for this indicator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&#160;:</term>
<listitem><simpara>The category of indicator.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_path</parameter>&#160;:</term>
<listitem><simpara>A custom path for finding icons.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to a new <link linkend="AppIndicator"><type>AppIndicator</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-status" role="function">
<title>app_indicator_set_status ()</title>
<indexterm zone="app-indicator-set-status"><primary>app_indicator_set_status</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_status            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="AppIndicatorStatus"><type>AppIndicatorStatus</type></link> status</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-status"><type>"status"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>The status to set for this indicator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-attention-icon" role="function">
<title>app_indicator_set_attention_icon ()</title>
<indexterm zone="app-indicator-set-attention-icon"><primary>app_indicator_set_attention_icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_attention_icon    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-attention-icon"><type>"attention-icon"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The name of the attention icon to set for this indicator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-menu" role="function">
<title>app_indicator_set_menu ()</title>
<indexterm zone="app-indicator-set-menu"><primary>app_indicator_set_menu</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_menu              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter><link linkend="GtkMenu"><type>GtkMenu</type></link> *menu</parameter>);</programlisting>
<para>
Sets the menu that should be shown when the Application Indicator
        is clicked on in the panel.  An application indicator will not
        be rendered unless it has a menu.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>menu</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GtkMenu"><type>GtkMenu</type></link> to set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-set-icon" role="function">
<title>app_indicator_set_icon ()</title>
<indexterm zone="app-indicator-set-icon"><primary>app_indicator_set_icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                app_indicator_set_icon              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *icon_name</parameter>);</programlisting>
<para>
Sets the default icon to use when the status is active but
		not set to attention.  In most cases, this should be the
		application icon for the program.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara>The icon name to set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-id" role="function">
<title>app_indicator_get_id ()</title>
<indexterm zone="app-indicator-get-id"><primary>app_indicator_get_id</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_id                (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-id"><type>"id"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The current ID
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-category" role="function">
<title>app_indicator_get_category ()</title>
<indexterm zone="app-indicator-get-category"><primary>app_indicator_get_category</primary></indexterm>
<programlisting><link linkend="AppIndicatorCategory"><returnvalue>AppIndicatorCategory</returnvalue></link>  app_indicator_get_category        (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-category"><type>"category"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The current category.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-status" role="function">
<title>app_indicator_get_status ()</title>
<indexterm zone="app-indicator-get-status"><primary>app_indicator_get_status</primary></indexterm>
<programlisting><link linkend="AppIndicatorStatus"><returnvalue>AppIndicatorStatus</returnvalue></link>  app_indicator_get_status            (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-status"><type>"status"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The current status.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-icon" role="function">
<title>app_indicator_get_icon ()</title>
<indexterm zone="app-indicator-get-icon"><primary>app_indicator_get_icon</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_icon              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-icon-name"><type>"icon-name"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The current icon name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-attention-icon" role="function">
<title>app_indicator_get_attention_icon ()</title>
<indexterm zone="app-indicator-get-attention-icon"><primary>app_indicator_get_attention_icon</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       app_indicator_get_attention_icon    (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Wrapper function for property <link linkend="AppIndicator-attention-icon-name"><type>"attention-icon-name"</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The current attention icon name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="app-indicator-get-menu" role="function">
<title>app_indicator_get_menu ()</title>
<indexterm zone="app-indicator-get-menu"><primary>app_indicator_get_menu</primary></indexterm>
<programlisting><link linkend="GtkMenu"><returnvalue>GtkMenu</returnvalue></link> *           app_indicator_get_menu              (<parameter><link linkend="AppIndicator"><type>AppIndicator</type></link> *self</parameter>);</programlisting>
<para>
Gets the menu being used for this application indicator.
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A menu object or <link linkend="NULL:CAPS"><type>NULL</type></link> if one hasn't been set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="libappindicator-app-indicator.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="AppIndicator--attention-icon-name" role="property"><title>The <literal>&quot;attention-icon-name&quot;</literal> property</title>
<indexterm zone="AppIndicator--attention-icon-name"><primary>AppIndicator:attention-icon-name</primary></indexterm>
<programlisting>  &quot;attention-icon-name&quot;      <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>If the indicator sets it's status to 'attention' then this icon is shown.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--category" role="property"><title>The <literal>&quot;category&quot;</literal> property</title>
<indexterm zone="AppIndicator--category"><primary>AppIndicator:category</primary></indexterm>
<programlisting>  &quot;category&quot;                 <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only</programlisting>
<para>The type of indicator that this represents.  Please don't use 'other'.  Defaults to 'Application Status'.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--connected" role="property"><title>The <literal>&quot;connected&quot;</literal> property</title>
<indexterm zone="AppIndicator--connected"><primary>AppIndicator:connected</primary></indexterm>
<programlisting>  &quot;connected&quot;                <link linkend="gboolean"><type>gboolean</type></link>              : Read</programlisting>
<para>Pretty simple, true if we have a reasonable expectation of being displayed through this object.  You should hide your TrayIcon if so.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="AppIndicator--icon-name" role="property"><title>The <literal>&quot;icon-name&quot;</literal> property</title>
<indexterm zone="AppIndicator--icon-name"><primary>AppIndicator:icon-name</primary></indexterm>
<programlisting>  &quot;icon-name&quot;                <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>The default icon that is shown for the indicator.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--icon-theme-path" role="property"><title>The <literal>&quot;icon-theme-path&quot;</literal> property</title>
<indexterm zone="AppIndicator--icon-theme-path"><primary>AppIndicator:icon-theme-path</primary></indexterm>
<programlisting>  &quot;icon-theme-path&quot;          <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only</programlisting>
<para>An additional place to look for icon names that may be installed by the application.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--id" role="property"><title>The <literal>&quot;id&quot;</literal> property</title>
<indexterm zone="AppIndicator--id"><primary>AppIndicator:id</primary></indexterm>
<programlisting>  &quot;id&quot;                       <link linkend="gchar"><type>gchar</type></link>*                : Read / Write / Construct Only</programlisting>
<para>An ID that should be unique, but used consistently by this program and it's indicator.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="AppIndicator--menu" role="property"><title>The <literal>&quot;menu&quot;</literal> property</title>
<indexterm zone="AppIndicator--menu"><primary>AppIndicator:menu</primary></indexterm>
<programlisting>  &quot;menu&quot;                     <link linkend="DBusGObjectPath"><type>DBusGObjectPath</type></link>*      : Read</programlisting>
<para>A method for getting the menu path as a string for DBus.</para></refsect2>
<refsect2 id="AppIndicator--status" role="property"><title>The <literal>&quot;status&quot;</literal> property</title>
<indexterm zone="AppIndicator--status"><primary>AppIndicator:status</primary></indexterm>
<programlisting>  &quot;status&quot;                   <link linkend="gchar"><type>gchar</type></link>*                : Read / Write</programlisting>
<para>Whether the indicator is shown or requests attention.  Defaults to 'off'.</para><para>Default value: NULL</para>
</refsect2>
</refsect1>
<refsect1 id="libappindicator-app-indicator.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="AppIndicator-connection-changed" role="signal"><title>The <literal>&quot;connection-changed&quot;</literal> signal</title>
<indexterm zone="AppIndicator-connection-changed"><primary>AppIndicator::connection-changed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gboolean"><type>gboolean</type></link>      arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : Run Last</programlisting>
<para>
Signaled when we connect to a watcher, or when it drops
		away.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>Whether we're connected or not
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-attention-icon" role="signal"><title>The <literal>&quot;new-attention-icon&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-attention-icon"><primary>AppIndicator::new-attention-icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : Run Last</programlisting>
<para>
Signaled when there is a new attention icon set for the
		object.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-icon" role="signal"><title>The <literal>&quot;new-icon&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-icon"><primary>AppIndicator::new-icon</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : Run Last</programlisting>
<para>
Signaled when there is a new icon set for the
		object.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="AppIndicator-new-status" role="signal"><title>The <literal>&quot;new-status&quot;</literal> signal</title>
<indexterm zone="AppIndicator-new-status"><primary>AppIndicator::new-status</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="AppIndicator"><type>AppIndicator</type></link> *arg0,
                                                        <link linkend="gchar"><type>gchar</type></link>        *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link>      user_data)      : Run Last</programlisting>
<para>
Signaled when the status of the indicator changes.
</para><variablelist role="params">
<varlistentry><term><parameter>arg0</parameter>&#160;:</term>
<listitem><simpara>The <link linkend="AppIndicator"><type>AppIndicator</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>The string value of the <link linkend="AppIndicatorStatus"><type>AppIndicatorStatus</type></link> enum.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>

</refentry>
